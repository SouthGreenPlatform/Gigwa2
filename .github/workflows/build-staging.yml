name: Gigwa Build Staging test
on:
  push:
    tags:
      - 'STAGING'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Java
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Build project
        run: |
          wget https://raw.githubusercontent.com/${{ github.repository }}/staging/misc/build-staging.sh
          chmod +x build-staging.sh
          ./build-staging.sh -P staging
          pwd
          ls

      - name: Set up variables
        id: vars
        run: |
          DATE=$(date +'%d%m%y')
          SHORT_SHA=$(git rev-parse --short HEAD)
          NEW_NAME="Gigwa2_STAGING_${DATE}-${SHORT_SHA}.zip"
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "NEW_NAME=$NEW_NAME" >> $GITHUB_ENV

      - name: Move and rename artifact
        run: |
          mv ${{ github.event.repository.name }}/target/Gigwa_V*_Webapp.zip ${{ env.NEW_NAME }}

      - name: Upload Webapp Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.NEW_NAME }}
          name: ${{ env.NEW_NAME }}
          if-no-files-found: error

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Delete release and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$(basename ${{ github.ref }})
          echo "Deleting release and tag $TAG_NAME"

          # Get the release ID associated with the tag
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" \
            | jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting release with ID $RELEASE_ID"
            # Delete the release
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          else
            echo "No release found for tag $TAG_NAME"
          fi

          # Delete the tag locally
          git tag -d $TAG_NAME
          # Delete the tag from the remote repository
          git push origin :refs/tags/$TAG_NAME

#  ssh:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Install OpenVPN
#        run: |
#          sudo apt update
#          sudo apt install -y openvpn openvpn-systemd-resolved
#      - name: Connect to VPN
#        uses: "kota65535/github-openvpn-connect-action@v2"
#        with:
#          config_file: .github/workflows/client.ovpn
#          username: ${{ secrets.OVPN_USERNAME }}
#          password: ${{ secrets.OVPN_PASSWORD }}
#          client_key: ${{ secrets.USER_KEY }}
#      - name: Use SSH
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            ls
